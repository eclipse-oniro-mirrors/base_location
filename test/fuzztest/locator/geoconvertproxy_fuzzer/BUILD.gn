# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#####################hydra-fuzz###################
import("//base/location/config.gni")
import("//build/config/features.gni")
import("//build/test.gni")

##############################fuzztest##########################################
if (location_feature_with_geocode) {
  ohos_fuzztest("GeoConvertProxyFuzzTest") {
    module_out_path = "location/location"
    fuzz_config_file =
        "$LOCATION_ROOT_DIR/test/fuzztest/locator/geoconvertproxy_fuzzer"
    include_dirs = [
      "$LOCATION_GEOCONVERT_ROOT/include",
      "$LOCATION_LOCATOR_ROOT/include",
      "$LOCATION_ROOT_DIR/interfaces/inner_api/include",
    ]
    cflags = [
      "-g",
      "-O0",
      "-Wno-unused-variable",
      "-fno-omit-frame-pointer",
    ]
    sources = [ "geoconvertproxy_fuzzer.cpp" ]
    deps = [
      "$ARKUI_ROOT_DIR/napi:ace_napi",
      "$LIB_UV_DIR:uv",
      "$LOCATION_GEOCONVERT_ROOT:lbsservice_geocode",
      "$LOCATION_LOCATOR_ROOT:lbsservice_locator",
      "$LOCATION_ROOT_DIR/frameworks/js/napi:geolocation_static",
      "$LOCATION_ROOT_DIR/frameworks/location_common/common:lbsservice_common",
      "$LOCATION_ROOT_DIR/frameworks/native:locator_sdk",
    ]
    external_deps = [
      "access_token:libaccesstoken_sdk",
      "c_utils:utils",
      "common_event_service:cesfwk_innerkits",
      "eventhandler:libeventhandler",
      "hilog:libhilog",
      "hisysevent:libhisysevent",
      "init:libbegetutil",
      "ipc:ipc_core",
      "samgr:samgr_proxy",
    ]

    defines = []
    if (location_feature_with_geocode) {
      defines += [ "FEATURE_GEOCODE_SUPPORT" ]
    }
  }
} else {
  ohos_fuzztest("GeoConvertProxyFuzzTest") {
    module_out_path = "location/location"
  }
}

###############################################################################
group("fuzztest") {
  testonly = true
  deps = []
  deps += [
    # deps file
    ":GeoConvertProxyFuzzTest",
  ]
}
###############################################################################
